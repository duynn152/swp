# Production Configuration for Render
server.port=${PORT:8080}

# Database Configuration (Render provides DATABASE_URL)
# Let Spring Boot auto-detect and convert the DATABASE_URL
# No need to specify datasource.url manually
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA/Hibernate Configuration  
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=false

# JWT Security Configuration
application.security.jwt.secret-key=${JWT_SECRET:404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970}
application.security.jwt.expiration=86400000
application.security.jwt.refresh-token.expiration=604800000
application.security.jwt.remember-me.expiration=2592000000

# Logging (reduced for production)
logging.level.root=WARN
logging.level.com.swp.backend=INFO

# CORS Configuration (update with your frontend URL)
spring.web.cors.allowed-origins=${FRONTEND_URL:http://localhost:5173},https://*.vercel.app,https://*.netlify.app
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=*
spring.web.cors.allow-credentials=true

# OpenAPI/Swagger Configuration
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.operationsSorter=method
springdoc.swagger-ui.tagsSorter=alpha
springdoc.packages-to-scan=com.swp.backend.controller

# Production optimizations
spring.jpa.open-in-view=false
spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true 
import { useState, useEffect } from 'react'
import { Row, Col, Card, Form, Input, Button, Typography, Checkbox, Divider, DatePicker, Select, message } from 'antd'
import { 
  UserOutlined, 
  LockOutlined, 
  MailOutlined,
  MedicineBoxOutlined,
  PhoneOutlined,
  IdcardOutlined,
  ArrowLeftOutlined,
  HomeOutlined
} from '@ant-design/icons'
import { loginUser, registerUser, storeTokens, storeUser, saveLoginCredentials, getSavedUsername } from '../services/authService'

const { Title, Text, Link } = Typography
const { Option } = Select

interface LoginPageProps {
  onNavigate?: (page: string) => void
}

export const LoginPage = ({ onNavigate }: LoginPageProps) => {
  const [isLogin, setIsLogin] = useState(true)
  const [loginForm] = Form.useForm()
  const [registerForm] = Form.useForm()
  const [loading, setLoading] = useState(false)

  // Auto-fill saved username when component mounts
  useEffect(() => {
    const savedUsername = getSavedUsername()
    console.log('üîç Debug auto-fill:', { savedUsername, isLogin })
    
    if (savedUsername && isLogin) {
      console.log('‚úÖ Setting form values:', { usernameOrEmail: savedUsername, rememberMe: true })
      loginForm.setFieldsValue({
        usernameOrEmail: savedUsername,
        rememberMe: true // Also set remember me to true if we have saved username
      })
    }
  }, [isLogin, loginForm])

  const onLoginFinish = async (values: { usernameOrEmail: string; password: string; rememberMe?: boolean }) => {
    setLoading(true)
    try {
      const response = await loginUser({
        usernameOrEmail: values.usernameOrEmail,
        password: values.password,
        rememberMe: values.rememberMe || false
      })
      
      // L∆∞u login credentials n·∫øu remember me ƒë∆∞·ª£c ch·ªçn
      saveLoginCredentials(values.usernameOrEmail, values.rememberMe || false)
      
      // L∆∞u tokens v√† user info v·ªõi remember me flag
      storeTokens(response.accessToken, response.refreshToken, values.rememberMe || false)
      storeUser(response.user, values.rememberMe || false)
      
      message.success('ƒêƒÉng nh·∫≠p th√†nh c√¥ng!')
      
      // Chuy·ªÉn t·ªõi dashboard
      onNavigate?.('dashboard')
    } catch (error: any) {
      message.error(error.message || 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i!')
    } finally {
      setLoading(false)
    }
  }

  const onRegisterFinish = async (values: any) => {
    setLoading(true)
    try {
      const registerData = {
        username: values.username,
        email: values.email,
        fullName: values.fullName,
        password: values.password,
        phone: values.phone,
        dateOfBirth: values.dateOfBirth?.format('YYYY-MM-DD'),
        gender: values.gender,
        role: 'PATIENT' as const // M·∫∑c ƒë·ªãnh l√† PATIENT
      }

      await registerUser(registerData)
      
      message.success('ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p.')
      
      // Chuy·ªÉn v·ªÅ form ƒëƒÉng nh·∫≠p
      setIsLogin(true)
      registerForm.resetFields()
    } catch (error: any) {
      message.error(error.message || 'ƒêƒÉng k√Ω th·∫•t b·∫°i!')
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-blue-100 flex items-center justify-center py-12">
      {/* Back to Home Button */}
      {onNavigate && (
        <div className="fixed top-4 left-4 z-10">
          <Button 
            size="large"
            icon={<ArrowLeftOutlined />}
            onClick={() => onNavigate('home')}
            className="shadow-lg"
          >
            V·ªÅ trang ch·ªß
          </Button>
        </div>
      )}

      <div className="max-w-6xl mx-auto px-4 w-full">
        <Row gutter={[32, 32]} align="middle">
          {/* Left side - Forms */}
          <Col xs={24} md={12} lg={10}>
            <Card className="shadow-2xl border-none">
              <div className="text-center mb-8">
                {/* Logo - clickable to home */}
                <div 
                  className="w-16 h-16 bg-blue-600 rounded-xl flex items-center justify-center mx-auto mb-4 cursor-pointer hover:bg-blue-700 transition-colors"
                  onClick={() => onNavigate?.('home')}
                >
                  <MedicineBoxOutlined className="text-white text-2xl" />
                </div>
                <Title level={2} className="text-blue-600 mb-2">
                  {isLogin ? 'ƒêƒÉng nh·∫≠p' : 'ƒêƒÉng k√Ω'}
                </Title>
                <Text className="text-gray-500">
                  {isLogin ? 'Truy c·∫≠p h·ªá th·ªëng MedCare Hospital' : 'T·∫°o t√†i kho·∫£n m·ªõi'}
                </Text>
              </div>

              {isLogin ? (
                // Login Form
                <Form
                  form={loginForm}
                  name="login"
                  onFinish={onLoginFinish}
                  layout="vertical"
                  size="large"
                >
                  <Form.Item
                    name="usernameOrEmail"
                    label="T√™n ƒëƒÉng nh·∫≠p / Email"
                    rules={[
                      { required: true, message: 'Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p!' }
                    ]}
                  >
                    <Input 
                      prefix={<UserOutlined className="text-gray-400" />}
                      placeholder="Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p ho·∫∑c email"
                    />
                  </Form.Item>

                  <Form.Item
                    name="password"
                    label="M·∫≠t kh·∫©u"
                    rules={[
                      { required: true, message: 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u!' }
                    ]}
                  >
                    <Input.Password 
                      prefix={<LockOutlined className="text-gray-400" />}
                      placeholder="Nh·∫≠p m·∫≠t kh·∫©u"
                    />
                  </Form.Item>

                  <Form.Item>
                    <div className="flex justify-between items-center">
                      <Form.Item name="rememberMe" valuePropName="checked" noStyle>
                        <Checkbox>Ghi nh·ªõ ƒëƒÉng nh·∫≠p</Checkbox>
                      </Form.Item>
                      <Link className="text-blue-600">Qu√™n m·∫≠t kh·∫©u?</Link>
                    </div>
                  </Form.Item>

                  <Form.Item>
                    <Button 
                      type="primary" 
                      htmlType="submit" 
                      block
                      className="bg-blue-600 hover:bg-blue-700 h-12"
                      loading={loading}
                    >
                      ƒêƒÉng nh·∫≠p
                    </Button>
                  </Form.Item>
                </Form>
              ) : (
                // Register Form
                <Form
                  form={registerForm}
                  name="register"
                  onFinish={onRegisterFinish}
                  layout="vertical"
                  size="large"
                >
                  <Row gutter={[16, 0]}>
                    <Col xs={24} md={12}>
                      <Form.Item
                        name="fullName"
                        label="H·ªç v√† t√™n"
                        rules={[
                          { required: true, message: 'Vui l√≤ng nh·∫≠p h·ªç t√™n!' }
                        ]}
                      >
                        <Input 
                          prefix={<UserOutlined className="text-gray-400" />}
                          placeholder="Nh·∫≠p h·ªç v√† t√™n"
                        />
                      </Form.Item>
                    </Col>
                    <Col xs={24} md={12}>
                      <Form.Item
                        name="username"
                        label="T√™n ƒëƒÉng nh·∫≠p"
                        rules={[
                          { required: true, message: 'Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p!' },
                          { min: 3, message: 'T√™n ƒëƒÉng nh·∫≠p t·ªëi thi·ªÉu 3 k√Ω t·ª±!' }
                        ]}
                      >
                        <Input 
                          prefix={<IdcardOutlined className="text-gray-400" />}
                          placeholder="Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p"
                        />
                      </Form.Item>
                    </Col>
                  </Row>

                  <Row gutter={[16, 0]}>
                    <Col xs={24} md={12}>
                      <Form.Item
                        name="email"
                        label="Email"
                        rules={[
                          { required: true, message: 'Vui l√≤ng nh·∫≠p email!' },
                          { type: 'email', message: 'Email kh√¥ng h·ª£p l·ªá!' }
                        ]}
                      >
                        <Input 
                          prefix={<MailOutlined className="text-gray-400" />}
                          placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ email"
                        />
                      </Form.Item>
                    </Col>
                    <Col xs={24} md={12}>
                      <Form.Item
                        name="phone"
                        label="S·ªë ƒëi·ªán tho·∫°i"
                        rules={[
                          { required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i!' },
                          { pattern: /^[0-9]{10,11}$/, message: 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá!' }
                        ]}
                      >
                        <Input 
                          prefix={<PhoneOutlined className="text-gray-400" />}
                          placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                        />
                      </Form.Item>
                    </Col>
                  </Row>

                  <Row gutter={[16, 0]}>
                    <Col xs={24} md={12}>
                      <Form.Item
                        name="dateOfBirth"
                        label="Ng√†y sinh"
                        rules={[
                          { required: true, message: 'Vui l√≤ng ch·ªçn ng√†y sinh!' }
                        ]}
                      >
                        <DatePicker 
                          placeholder="Ch·ªçn ng√†y sinh"
                          style={{ width: '100%' }}
                          format="DD/MM/YYYY"
                        />
                      </Form.Item>
                    </Col>
                    <Col xs={24} md={12}>
                      <Form.Item
                        name="gender"
                        label="Gi·ªõi t√≠nh"
                        rules={[
                          { required: true, message: 'Vui l√≤ng ch·ªçn gi·ªõi t√≠nh!' }
                        ]}
                      >
                        <Select placeholder="Ch·ªçn gi·ªõi t√≠nh">
                          <Option value="MALE">Nam</Option>
                          <Option value="FEMALE">N·ªØ</Option>
                          <Option value="OTHER">Kh√°c</Option>
                        </Select>
                      </Form.Item>
                    </Col>
                  </Row>

                  <Row gutter={[16, 0]}>
                    <Col xs={24} md={12}>
                      <Form.Item
                        name="password"
                        label="M·∫≠t kh·∫©u"
                        rules={[
                          { required: true, message: 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u!' },
                          { min: 6, message: 'M·∫≠t kh·∫©u t·ªëi thi·ªÉu 6 k√Ω t·ª±!' }
                        ]}
                      >
                        <Input.Password 
                          prefix={<LockOutlined className="text-gray-400" />}
                          placeholder="Nh·∫≠p m·∫≠t kh·∫©u"
                        />
                      </Form.Item>
                    </Col>
                    <Col xs={24} md={12}>
                      <Form.Item
                        name="confirmPassword"
                        label="X√°c nh·∫≠n m·∫≠t kh·∫©u"
                        dependencies={['password']}
                        rules={[
                          { required: true, message: 'Vui l√≤ng x√°c nh·∫≠n m·∫≠t kh·∫©u!' },
                          ({ getFieldValue }) => ({
                            validator(_, value) {
                              if (!value || getFieldValue('password') === value) {
                                return Promise.resolve()
                              }
                              return Promise.reject(new Error('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!'))
                            },
                          }),
                        ]}
                      >
                        <Input.Password 
                          prefix={<LockOutlined className="text-gray-400" />}
                          placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
                        />
                      </Form.Item>
                    </Col>
                  </Row>

                  <Form.Item
                    name="agreement"
                    valuePropName="checked"
                    rules={[
                      { 
                        validator: (_, value) =>
                          value ? Promise.resolve() : Promise.reject(new Error('Vui l√≤ng ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n!'))
                      }
                    ]}
                  >
                    <Checkbox>
                      T√¥i ƒë·ªìng √Ω v·ªõi <Link className="text-blue-600">ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng</Link> v√†{' '}
                      <Link className="text-blue-600">Ch√≠nh s√°ch b·∫£o m·∫≠t</Link>
                    </Checkbox>
                  </Form.Item>

                  <Form.Item>
                    <Button 
                      type="primary" 
                      htmlType="submit"
                      block
                      className="bg-blue-600 hover:bg-blue-700 h-12"
                      loading={loading}
                    >
                      ƒêƒÉng k√Ω t√†i kho·∫£n
                    </Button>
                  </Form.Item>
                </Form>
              )}

              <Divider />

              <div className="text-center">
                <Text className="text-gray-500">
                  {isLogin ? 'Ch∆∞a c√≥ t√†i kho·∫£n?' : 'ƒê√£ c√≥ t√†i kho·∫£n?'}
                  <Link 
                    className="text-blue-600 ml-1"
                    onClick={() => setIsLogin(!isLogin)}
                  >
                    {isLogin ? 'ƒêƒÉng k√Ω ngay' : 'ƒêƒÉng nh·∫≠p ngay'}
                  </Link>
                </Text>
              </div>
            </Card>
          </Col>

          {/* Right side - Hospital Info */}
          <Col xs={24} md={12} lg={14}>
            <div className="text-center md:text-left">
              <Title level={1} className="text-blue-600 mb-4">
                Ch√†o m·ª´ng ƒë·∫øn v·ªõi <br />
                <span className="text-blue-800">MedCare Hospital</span>
              </Title>
              
              <Text className="text-gray-600 text-lg block mb-8">
                {isLogin 
                  ? 'H·ªá th·ªëng qu·∫£n l√Ω b·ªánh vi·ªán hi·ªán ƒë·∫°i v·ªõi ƒë·∫ßy ƒë·ªß c√°c t√≠nh nƒÉng h·ªó tr·ª£ b√°c sƒ©, ƒëi·ªÅu d∆∞·ª°ng v√† qu·∫£n tr·ªã vi√™n.'
                  : 'T·∫°o t√†i kho·∫£n ƒë·ªÉ tr·∫£i nghi·ªám c√°c d·ªãch v·ª• y t·∫ø ch·∫•t l∆∞·ª£ng cao t·∫°i MedCare Hospital.'
                }
              </Text>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <Card className="border-l-4 border-l-blue-600 shadow-md">
                  <Title level={4} className="text-blue-600 mb-2">B·ªánh nh√¢n</Title>
                  <Text className="text-gray-600">
                    ‚Ä¢ ƒê·∫∑t l·ªãch kh√°m online<br />
                    ‚Ä¢ Xem k·∫øt qu·∫£ x√©t nghi·ªám<br />
                    ‚Ä¢ L·ªãch s·ª≠ kh√°m b·ªánh<br />
                    ‚Ä¢ Thanh to√°n tr·ª±c tuy·∫øn
                  </Text>
                </Card>

                <Card className="border-l-4 border-l-green-600 shadow-md">
                  <Title level={4} className="text-green-600 mb-2">Nh√¢n vi√™n y t·∫ø</Title>
                  <Text className="text-gray-600">
                    ‚Ä¢ Qu·∫£n l√Ω l·ªãch kh√°m<br />
                    ‚Ä¢ H·ªì s∆° b·ªánh √°n ƒëi·ªán t·ª≠<br />
                    ‚Ä¢ K√™ ƒë∆°n thu·ªëc<br />
                    ‚Ä¢ B√°o c√°o y t·∫ø
                  </Text>
                </Card>

                <Card className="border-l-4 border-l-orange-600 shadow-md">
                  <Title level={4} className="text-orange-600 mb-2">D·ªãch v·ª• 24/7</Title>
                  <Text className="text-gray-600">
                    ‚Ä¢ C·∫•p c·ª©u 24/7<br />
                    ‚Ä¢ T∆∞ v·∫•n tr·ª±c tuy·∫øn<br />
                    ‚Ä¢ H·ªó tr·ª£ k·ªπ thu·∫≠t<br />
                    ‚Ä¢ ChƒÉm s√≥c kh√°ch h√†ng
                  </Text>
                </Card>

                <Card className="border-l-4 border-l-purple-600 shadow-md">
                  <Title level={4} className="text-purple-600 mb-2">Ch·∫•t l∆∞·ª£ng</Title>
                  <Text className="text-gray-600">
                    ‚Ä¢ ƒê·ªôi ng≈© b√°c sƒ© gi√†u kinh nghi·ªám<br />
                    ‚Ä¢ Trang thi·∫øt b·ªã hi·ªán ƒë·∫°i<br />
                    ‚Ä¢ Ti√™u chu·∫©n qu·ªëc t·∫ø<br />
                    ‚Ä¢ An to√†n b·ªánh nh√¢n
                  </Text>
                </Card>
              </div>

              <div className="mt-8 p-6 bg-white/80 backdrop-blur-sm rounded-xl">
                <Title level={4} className="text-blue-600 mb-3">Li√™n h·ªá h·ªó tr·ª£</Title>
                <div className="space-y-2">
                  <Text>üìû Hotline: <strong>(028) 3999 8888</strong></Text>
                  <Text>üí¨ Email: <strong>support@medcare.vn</strong></Text>
                  <Text>üïí Th·ªùi gian: <strong>24/7 - C·∫£ tu·∫ßn</strong></Text>
                  <Text>üìç ƒê·ªãa ch·ªâ: <strong>123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM</strong></Text>
                </div>
              </div>
            </div>
          </Col>
        </Row>
      </div>
    </div>
  )
} 